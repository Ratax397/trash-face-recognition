#!/usr/bin/env python3
"""
Script de d√©marrage du serveur Flask
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_dependencies():
    """V√©rifier que toutes les d√©pendances sont install√©es"""
    required_packages = [
        'flask',
        'flask-cors',
        'mysql-connector-python',
        'face-recognition',
        'opencv-python',
        'numpy',
        'Pillow',
        'bcrypt',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå D√©pendances manquantes:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüì¶ Installation des d√©pendances...")
        
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
            print("‚úÖ D√©pendances install√©es avec succ√®s")
        except subprocess.CalledProcessError:
            print("‚ùå Erreur lors de l'installation des d√©pendances")
            return False
    
    return True

def check_mysql_connection():
    """V√©rifier la connexion √† MySQL"""
    try:
        import mysql.connector
        from dotenv import load_dotenv
        
        load_dotenv()
        
        config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'user': os.getenv('DB_USER', 'root'),
            'password': os.getenv('DB_PASSWORD', ''),
            'database': os.getenv('DB_NAME', 'face_recognition_db')
        }
        
        # Essayer de se connecter
        connection = mysql.connector.connect(**config)
        connection.close()
        print("‚úÖ Connexion √† MySQL √©tablie")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† MySQL: {e}")
        print("\nüìã V√©rifiez votre configuration:")
        print("   1. MySQL est-il install√© et en cours d'ex√©cution?")
        print("   2. Avez-vous cr√©√© la base de donn√©es?")
        print("   3. V√©rifiez le fichier .env")
        return False

def create_database():
    """Cr√©er la base de donn√©es si elle n'existe pas"""
    try:
        import mysql.connector
        from dotenv import load_dotenv
        
        load_dotenv()
        
        config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'user': os.getenv('DB_USER', 'root'),
            'password': os.getenv('DB_PASSWORD', ''),
        }
        
        connection = mysql.connector.connect(**config)
        cursor = connection.cursor()
        
        db_name = os.getenv('DB_NAME', 'face_recognition_db')
        cursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_name}")
        
        connection.close()
        print(f"‚úÖ Base de donn√©es '{db_name}' cr√©√©e/v√©rifi√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage du serveur de reconnaissance faciale")
    print("=" * 50)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        return
    
    # Cr√©er la base de donn√©es
    if not create_database():
        return
    
    # V√©rifier la connexion MySQL
    if not check_mysql_connection():
        return
    
    print("\n‚úÖ Toutes les v√©rifications sont pass√©es")
    print("üåê D√©marrage du serveur Flask...")
    print("=" * 50)
    
    # D√©marrer le serveur
    try:
        from app import app
        
        port = int(os.getenv('PORT', 5000))
        debug = os.getenv('DEBUG', 'False').lower() == 'true'
        
        print(f"üì° Serveur accessible sur: http://localhost:{port}")
        print(f"üîß Mode debug: {'Activ√©' if debug else 'D√©sactiv√©'}")
        print("\n‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter le serveur")
        
        app.run(host='0.0.0.0', port=port, debug=debug)
        
    except KeyboardInterrupt:
        print("\n\nüõë Serveur arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors du d√©marrage du serveur: {e}")

if __name__ == '__main__':
    main()